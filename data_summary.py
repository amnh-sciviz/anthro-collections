# -*- coding: utf-8 -*-

import argparse
import collections
import math
import os
from pprint import pprint
import sys

import lib.io_utils as io
import lib.list_utils as lu
import lib.math_utils as mu

# input
parser = argparse.ArgumentParser()
parser.add_argument('-in', dest="INPUT_FILE", default="data/Lumholtz.csv", help="File generated by html_to_csv.py")
parser.add_argument('-has', dest="FIELDS_HAS", default="Curatorial Notes,Exhibition History,Publication History,Thumb URL", help="List of fields to show presence of value")
parser.add_argument('-counts', dest="FIELDS_COUNTS", default="Acquisition Year,Categories,Collection,Collector,Country,Culture,Date,Donor,Hall,Keywords,Locale,Material,Period,Regions,Subject,Technique", help="List of fields to show counts")
parser.add_argument('-lists', dest="FIELDS_LISTS", default="Categories,Keywords,Regions", help="List of fields that are comma-separated lists")
parser.add_argument('-merge', dest="FIELDS_MERGE", default="Categories=Category&Regions=Region", help="List of fields that are comma-separated lists")
parser.add_argument('-count', dest="DISPLAY_COUNT", default=30, type=int, help="Number to display per group")
a = parser.parse_args()

FIELDS_HAS = a.FIELDS_HAS.strip().split(",")
FIELDS_COUNTS = a.FIELDS_COUNTS.strip().split(",")
FIELDS_LISTS = a.FIELDS_LISTS.strip().split(",")
FIELDS_MERGE = io.parseQueryString(a.FIELDS_MERGE.strip())

fieldNames, items = io.readCsv(a.INPUT_FILE)
itemCount = len(items)

# Parse lists
for i, item in enumerate(items):
    for field in FIELDS_LISTS:
        items[i][field] = [value.strip() for value in item[field].strip().split(",")]

# Merge lists
for i, item in enumerate(items):
    for field in FIELDS_MERGE:
        otherField = FIELDS_MERGE[field]
        values = [item[field]] if isinstance(item[field], str) else item[field]
        otherValues = [item[otherField]] if isinstance(item[otherField], str) else item[otherField]
        values = set(values).union(set(otherValues))
        items[i][field] = list(values)

for field in FIELDS_HAS:
    has = 0
    for item in items:
        value = item[field]
        if isinstance(value, str) and len(value.strip()) > 0 or isinstance(value, list) and len(value) > 0:
            has += 1
    hasnt = itemCount - has
    print('\n==============================================================================')
    print("FIELD: %s" % field)
    print('------------------------------------------------------------------------------')
    print("%s (%s%%)\t have" % (mu.formatNumber(has), round(1.0 * has / itemCount * 100, 2)))
    print("%s (%s%%)\t don't have" % (mu.formatNumber(hasnt), round(1.0 * hasnt / itemCount * 100, 2)))

for field in FIELDS_COUNTS:
    values = []
    if field in FIELDS_LISTS:
        values = lu.flattenList([item[field] for item in items if item[field]])
        values = [value for value in values if value != ""]
    else:
        values = [item[field] if item[field] != "" else "<empty>" for item in items]

    uvalues = list(set(values))

    print('\n==============================================================================')
    print('Field: %s (%s unique values) / Top %s:' % (field, mu.formatNumber(len(uvalues)), a.DISPLAY_COUNT))
    print('------------------------------------------------------------------------------')

    counter = collections.Counter(values)
    counts = counter.most_common(a.DISPLAY_COUNT)
    for value, count in counts:
        print("%s (%s%%)\t %s" % (mu.formatNumber(count), round(1.0 * count / itemCount * 100.0, 2), value))
