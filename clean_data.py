# -*- coding: utf-8 -*-

import argparse
import collections
from datetime import datetime
import math
import os
from pprint import pprint
import re
import sys

import lib.io_utils as io
import lib.list_utils as lu
import lib.math_utils as mu

# input
parser = argparse.ArgumentParser()
parser.add_argument('-in', dest="INPUT_FILE", default="data/MexicoAndCentralAmerica.csv", help="File generated by html_to_csv.py")
parser.add_argument('-out', dest="OUTPUT_FILE", default="data/MexicoAndCentralAmerica_cleaned.csv", help="Output csv/tsv file")
a = parser.parse_args()

# Make sure output dirs exist
io.makeDirectories([a.OUTPUT_FILE])

fieldNames, items = io.readCsv(a.INPUT_FILE)
itemCount = len(items)

# this is where the clean data will go
cleanedItems = [{
    "Id": item["Catalog No"],
    "Acquisition Year": "",
    "Acquisition Type": "",
    "Latitude": 0,
    "Longitude": 0,
    "Country": ""
} for item in items]

##############################################
# STEP 1: retrieve year and acquisition type #
##############################################

validYearEnd = int(datetime.now().year)
def isValidYear(year):
    global validYearEnd
    validYearStart = 1800
    return isinstance(year, (int,)) and validYearStart <= year <= validYearEnd

# lu.countValues(items, "Acquisition Year")
# sys.exit()
datePattern = re.compile("([12][0-9]{3})(\-[12][0-9]{3})?( \[[A-Z, ]+\])?")

for i, item in enumerate(items):
    year = item["Acquisition Year"]
    yearStr = str(year).strip()
    if len(yearStr) < 1:
        continue

    if isValidYear(year):
        cleanedItems[i]["Acquisition Year"] = year
        continue

    # Try to match against pattern
    matches = datePattern.match(yearStr)

    if not matches:
        print("Could not match pattern against string: %s" % yearStr)
        continue

    acquisitionYear = int(matches.group(1))
    # Check for year range
    aquisitionYearRangeEnd = ""
    if matches.group(2) is not None:
        aquisitionYearRangeEnd = int(matches.group(2).strip("-"))
    # Check for acquisition type
    acquisitionType = ""
    if matches.group(3) is not None:
        acquisitionType = matches.group(3).strip("[] ")
    # Check for a list; just take the first one
    if "," in acquisitionType:
        acquisitionType = acquisitionType.split(", ")[0]

    # Check for valid year range
    if isValidYear(acquisitionYear) and isValidYear(aquisitionYearRangeEnd):
        # Just take the mean
        acquisitionYear = int(round(0.5 * (acquisitionYear + aquisitionYearRangeEnd)))
    elif not isValidYear(acquisitionYear) and isValidYear(aquisitionYearRangeEnd):
        acquisitionYear = aquisitionYearRangeEnd

    cleanedItems[i]["Acquisition Year"] = acquisitionYear
    cleanedItems[i]["Acquisition Type"] = acquisitionType.capitalize()

# Debugging...
# lu.countValues(cleanedItems, "Acquisition Year")
# lu.countValues(cleanedItems, "Acquisition Type")
# sys.exit()

##############################################
# STEP 2: retrieve country                   #
##############################################

# lu.countValues(items, "Country")

_, countrySynonyms = io.readCsv("data/CountriesSynonyms.csv")
countrySynonymLookup = lu.createLookup(countrySynonyms, "alt")

for i, item in enumerate(items):
    country = item["Country"]
    if len(country) < 1:
        continue

    country = country.replace("?", "")
    country = country.replace("/", ", ")
    if "," in country:
        country = country.split(",")[0]
    country = country.strip()
    country = country.title()

    if country in countrySynonymLookup:
        country = countrySynonymLookup[country]["name"]

    cleanedItems[i]["Country"] = country

# Debugging...
# lu.countValues(cleanedItems, "Country")
# sys.exit()

##############################################
# STEP 3: retrieve lat lon                   #
##############################################

# Attempt to retrieve country lat lon
# Reference: https://developers.google.com/public-data/docs/canonical/countries_csv
_, countryLatLons = io.readCsv("data/CountriesLatLon.csv")
countryLatLonLookup = lu.createLookup(countryLatLons, "name")

# uCountries = lu.unique([item["Country"] for item in cleanedItems])
# for country in uCountries:
#     if len(country) < 1:
#         continue
#     if country not in countryLatLonLookup:
#         print("%s missing in country lat lon list" % country)
#         continue

for i, item in enumerate(cleanedItems):
    country = item["Country"]
    if country not in countryLatLonLookup:
        continue

    latlon = countryLatLonLookup[country]
    cleanedItems[i]["Latitude"] = latlon["latitude"]
    cleanedItems[i]["Longitude"] = latlon["longitude"]

fieldNames = [
    "Id",
    "Acquisition Year",
    "Acquisition Type",
    "Latitude",
    "Longitude",
    "Country"
]
io.writeCsv(a.OUTPUT_FILE, cleanedItems, fieldNames)
